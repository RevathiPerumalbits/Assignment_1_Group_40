name: Iris MLOps Pipeline

on:
  push:
    branches:
      - main

jobs:
  mlops-pipeline:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v4

    # Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    # Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt 
        pip install dvc==3.51.2 flake8 pytest
        pip install --no-cache-dir flake8 pytest
        which flake8
        which pytest
      # Initialize DVC
    - name: Initialize DVC
      run: |
        dvc init --no-scm
        dvc add data/raw/iris.csv
        dvc repro
        ls -a .dvc
        cat dvc.yaml
        ls data/raw/iris.csv.dvc
    # Load data
    - name: Load data
      run: python src/_01_data_loader.py
    
    # Preprocess data
    - name: Preprocess data
      run: python src/_02_data_preparation.py
        # Clean MLflow artifacts
    - name: Clean MLflow artifacts
      run: |
        rm -rf mlruns mlruns.db mlruns_backup.db
        echo "Cleaned mlruns/ and mlruns.db"
    
    # Check and trigger re-training
    - name: Check and trigger re-training
      env:
        MLFLOW_TRACKING_URI: sqlite:///mlruns.db
      run: python src/_03_retrain_trigger.py
    # Train models
    - name: Train models
      env:
        MLFLOW_TRACKING_URI: sqlite:///mlruns.db
      run: |
        echo "MLflow tracking URI: $MLFLOW_TRACKING_URI"
        echo "MLflow artifact root: $MLFLOW_ARTIFACT_ROOT"
        ls -la
        mlflow ui --port 5000 &
        sleep 5  # Wait for MLflow server to start
        python src/_04_model_train.py

    # Evaluate and register models
    - name: Evaluate and register models
      env:
        MLFLOW_TRACKING_URI: sqlite:///mlruns.db
      run: |
        echo "MLflow tracking URI: $MLFLOW_TRACKING_URI"
        echo "MLflow artifact root: $MLFLOW_ARTIFACT_ROOT"
        ls -la mlruns
        python src/_05_model_evaluate.py

    # Build Docker image build
    - name: Build Docker image
      run: 
        docker build -t iris-mlops-api .
        # Push Docker image to Docker Hub
    - name: Push Docker image to Docker Hub
      run: |
        echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
        docker tag iris-mlops-api ${{ secrets.DOCKERHUB_USERNAME }}/iris-mlops-api:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/iris-mlops-api:latest

    # Run Docker container
    - name: Run Docker container
      run: |
        docker run -d -p 8000:8000 --name iris-mlops-api iris-mlops-api
        sleep 10  # Give container time to start

    # Test API and log prediction
    - name: Test API and log prediction
      run: |
        sleep 5  # Wait for container to start
        curl -X POST "http://localhost:8000/predict" -H "Content-Type: application/json" -d '{"features": [5.1, 3.5, 1.4, 0.2]}' > prediction.json
        echo "Raw prediction.json output:"
        cat prediction.json
    - name: Test Schema Validation
      run: |
        docker exec iris-mlops-api curl -v -X POST "http://localhost:8000/predict" -H "Content-Type: application/json" -d '{"features": [5.1, 3.5, -1.4, 0.2]}' 
        echo "Invalid input test passed"
    - name: Log prediction result
      run: |
        python src/log_prediction.py
        echo "Prediction logged to logs/predictions.csv"
    # Test metrics endpoint
    - name: Test metrics endpoint
      run: |
        curl http://localhost:8000/metrics
        # Test Prometheus endpoint
    - name: Test Prometheus endpoint
      run: |
        curl http://localhost:8000/prometheus
    - name: Test Prometheus
      run: |
        docker run -d -p 9090:9090 -v $(pwd)/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus
        echo "Prometheus endpoint tested successfully"
    - name: Test Grafana
      run: |
        docker run -d -p 3000:3000 grafana/grafana
        echo "Grafana endpoint tested successfully"
    # Upload prediction logs as artifact
    - name: Upload prediction logs
      uses: actions/upload-artifact@v4
      with:
        name: prediction-logs
        path: logs/predictions.csv
        if-no-files-found: warn
        include-hidden-files: false

    # Upload saved models as artifact
    - name: Upload saved models
      uses: actions/upload-artifact@v4
      with:
        name: saved-models
        path: saved_models/
        if-no-files-found: warn
        include-hidden-files: false

    # Upload MLflow artifacts
    - name: Upload MLflow artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mlflow-artifacts
        path: mlruns/
        if-no-files-found: warn
        include-hidden-files: false
       # Upload DVC artifacts
    - name: Upload DVC artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dvc-artifacts
        path: |
          .dvc
          dvc.yaml
          data/raw/iris.csv.dvc
        if-no-files-found: warn
        include-hidden-files: true